generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  firstName             String
  lastName              String
  email                 String                 @unique
  phone                 String?
  service               String?
  gender                Gender?
  country               String?
  educationLevel        String?
  password              String
  role                  Role                   @default(USER)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  progressStatus        ProgressStatus         @default(PAYMENT_PENDING)
  cvs                   CV[]
  enrollments           Enrollment[]
  feedbacks             Feedback[]
  notifications         Notification[]
  paymentProofs         PaymentProof[]
  personalDiscovery     PersonalDiscovery?
  scholarshipAssessment ScholarshipAssessment?
  subscriptions         Subscription[]
  trackProgress         TrackProgress[]
  events                UserEvent[]
  profile               UserProfile?
  marketingCampaigns    MarketingCampaign[]
  emailLogs             EmailLog[]
}

model PersonalDiscovery {
  id                           String   @id @default(cuid())
  userId                       String   @unique
  strengths                    String[]
  weaknesses                   String[]
  opportunities                String[]
  achievements                 String[]
  threats                      String[]
  familyAspirations            String[]
  careerAspirations            String[]
  financialBusinessAspirations String[]
  socialAspirations            String[]
  desiredPosition              String[]
  requiredSkills               String[]
  coursesAndTrainings          String[]
  strategies                   String[]
  shortTermGoals               String[]
  documentAnalysis             String?
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt
  user                         User     @relation(fields: [userId], references: [id])
}

model ScholarshipAssessment {
  id                   String   @id @default(cuid())
  userId               String   @unique
  educationLevel       String
  fieldPreference      String
  ageRange             String
  gender               String
  employmentPreference String
  selfEmploymentType   String?
  careerSector         String
  unpaidPassion        String
  personalPassion      String
  lifeGoal             String
  futureTitle          String
  futureTasks          String
  requiredSkills       String
  desiredCourses       String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id])
}

model UserProfile {
  id          String   @id @default(cuid())
  bio         String?
  avatar      String?
  phoneNumber String?
  address     String?
  userId      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Plan {
  id            String         @id @default(cuid())
  name          String
  description   String
  price         Float
  duration      Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  services      String[]
  features      String[]
  subscriptions Subscription[]
}

model Subscription {
  id            String             @id @default(cuid())
  startDate     DateTime
  endDate       DateTime
  status        SubscriptionStatus
  userId        String
  planId        String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  paymentProofs PaymentProof[]
  plan          Plan               @relation(fields: [planId], references: [id])
  user          User               @relation(fields: [userId], references: [id])
}

model PaymentProof {
  id             String        @id @default(cuid())
  imageUrl       String
  status         PaymentStatus
  userId         String
  subscriptionId String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  subscription   Subscription  @relation(fields: [subscriptionId], references: [id])
  user           User          @relation(fields: [userId], references: [id])
}

model Feedback {
  id        String   @id @default(cuid())
  content   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  content   String
  read      Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model TrackProgress {
  id        String   @id @default(cuid())
  title     String
  progress  Int
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Publication {
  id            String   @id @default(cuid())
  title         String
  authors       String
  abstract      String
  externalUrl   String
  publishedDate DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Testimonial {
  id        String   @id @default(cuid())
  content   String
  author    String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Mentor {
  id        String   @id @default(cuid())
  name      String
  bio       String
  expertise String[]
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeamMember {
  id        String   @id @default(cuid())
  name      String
  role      String
  bio       String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DownloadableResource {
  id          String   @id @default(cuid())
  title       String
  description String
  fileUrl     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Event {
  id          String      @id @default(cuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  location    String
  bannerUrl   String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  users       UserEvent[]
}

model UserEvent {
  userId    String
  eventId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([userId, eventId])
}

model Course {
  id                 String              @id @default(cuid())
  title              String
  subtitle           String
  description        String
  content            String
  duration           Int
  level              String
  categoryId         String
  isFeatured         Boolean             @default(false)
  previewVideoUrl    String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  category           Category            @relation(fields: [categoryId], references: [id])
  enrollments        Enrollment[]
  learningObjectives LearningObjective[]
  lessons            Lesson[]
}

model Lesson {
  id          String             @id @default(cuid())
  title       String
  content     String
  order       Int
  duration    Int
  courseId    String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  course      Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completions LessonCompletion[]
}

model Enrollment {
  id               String             @id @default(cuid())
  userId           String
  courseId         String
  progress         Int                @default(0)
  completedAt      DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  course           Course             @relation(fields: [courseId], references: [id])
  user             User               @relation(fields: [userId], references: [id])
  completedLessons LessonCompletion[]

  @@unique([userId, courseId])
}

model LessonCompletion {
  id           String     @id @default(cuid())
  enrollmentId String
  lessonId     String
  completedAt  DateTime   @default(now())
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])
  lesson       Lesson     @relation(fields: [lessonId], references: [id])

  @@unique([enrollmentId, lessonId])
}

model LearningObjective {
  id       String @id @default(cuid())
  content  String
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Category {
  id      String   @id @default(cuid())
  name    String   @unique
  courses Course[]
}

model CV {
  id             String   @id @default(cuid())
  userId         String
  fileName       String
  fileUrl        String
  uploadedAt     DateTime @default(now())
  analysisResult String?
  user           User     @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CareerUser {
  id              String             @id @default(cuid())
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  name            String
  email           String?
  age             String
  gender          String?
  location        String?
  isAuthenticated Boolean            @default(false)
  authUserId      String?            @unique
  assessments     CareerAssessment[]

  @@index([email])
  @@index([authUserId])
  @@map("career_users")
}

model CareerAssessment {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  careerUserId    String
  status          AssessmentStatus @default(IN_PROGRESS)
  completedAt     DateTime?
  education       String
  field           String
  employment      String
  selfEmployment  String?
  sector          String
  passion         String
  lifePassion     String
  lifeGoal        String
  futureTitle     String
  futureTasks     String
  requiredSkills  String
  requiredCourses String
  suggestedCareer String?
  confidenceScore Float?
  matchingFactors String[]
  isShared        Boolean          @default(false)
  shareCode       String?          @unique
  careerUser      CareerUser       @relation(fields: [careerUserId], references: [id])
  userFeedback    UserFeedback?

  @@index([careerUserId])
  @@index([status])
  @@index([shareCode])
  @@map("career_assessments")
}

model UserFeedback {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  assessmentId   String           @unique
  rating         Int
  isRelevant     Boolean
  comments       String?
  wouldRecommend Boolean
  assessment     CareerAssessment @relation(fields: [assessmentId], references: [id])

  @@map("user_feedback")
}

model CareerAnalytics {
  id                   String   @id @default(cuid())
  careerPath           String   @unique
  totalSuggestions     Int      @default(0)
  averageConfidence    Float    @default(0)
  positiveRatings      Int      @default(0)
  negativeRatings      Int      @default(0)
  ageRangeDistribution Json?
  genderDistribution   Json?
  fieldDistribution    Json?
  updatedAt            DateTime @updatedAt

  @@map("career_analytics")
}

model AnalyticsIndex {
  id                   String   @id @default(cuid())
  date                 DateTime @default(now())
  totalUsers           Int      @default(0)
  activeUsers          Int      @default(0)
  completionRate       Float    @default(0)
  newAssessments       Int      @default(0)
  completedAssessments Int      @default(0)
  sharedResults        Int      @default(0)

  @@index([date])
  @@map("analytics_index")
}

enum AssessmentStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum ProgressStatus {
  PAYMENT_PENDING
  PERSONAL_DISCOVERY_PENDING
  CV_ALIGNMENT_PENDING
  SCHOLARSHIP_MATRIX_PENDING
  ESSAYS_PENDING
  COMPLETED
}

enum Role {
  USER
  ADMIN
  MENTOR
  TEAM_MEMBER
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  PENDING
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model MarketingCampaign {
  id              String    @id @default(cuid())
  subject         String
  content         String    @db.Text
  recipientType   String // "all" | "role" | "selected"
  targetRole      Role?
  selectedUserIds String[] // For "selected" type
  status          String    @default("DRAFT") // "DRAFT" | "SCHEDULED" | "SENDING" | "COMPLETED" | "FAILED"
  totalRecipients Int       @default(0)
  sentCount       Int       @default(0)
  scheduledDate   DateTime?
  createdAt       DateTime  @default(now())
  completedAt     DateTime?
  createdBy       String

  creator   User       @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  emailLogs EmailLog[]

  @@map("marketing_campaigns")
}

model EmailLog {
  id          String    @id @default(cuid())
  campaignId  String
  recipientId String?
  email       String
  status      String // "SENT" | "FAILED" | "OPENED" | "CLICKED"
  sentAt      DateTime?
  openedAt    DateTime?
  clickedAt   DateTime?
  error       String?
  createdAt   DateTime  @default(now())

  campaign  MarketingCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  recipient User?             @relation(fields: [recipientId], references: [id], onDelete: SetNull)

  @@map("email_logs")
}
